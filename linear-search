import pyglet
import random

# Create a window
window = pyglet.window.Window(width=1200, height=675, caption='Linear Search Visualization')
batch = pyglet.graphics.Batch()

# Generate a list with random numbers ensuring 64 is included
numbers = random.sample(range(1, 100), 21) + [64]
random.shuffle(numbers)

# Variables to control the animation and search
current_index = 0
found_index = -1
search_complete = False

def linear_search():
    global current_index, found_index, search_complete
    if current_index < len(numbers):
        if numbers[current_index] == 64:
            found_index = current_index
            search_complete = True
        current_index += 1
    else:
        search_complete = True

# Schedule the linear search to run every 0.5 seconds
pyglet.clock.schedule_interval(lambda dt: linear_search(), 0.5)

@window.event
def on_draw():
    window.clear()
    row_height = 60
    row_width = 1200 - 10
    box_width = 100
    box_height = 60
    for i, number in enumerate(numbers):
        # Define the position of each 'box'
        row = i // (row_width // box_width)
        col = i % (row_width // box_width)
        x = col * box_width + 10
        y = window.height //2 - (row + 1) * row_height

        # Draw the box
        if i == current_index and not search_complete:
            color = (255, 0, 0)  # Red for the current box being checked
        elif i == found_index:
            color = (70, 189 , 123)  # Green if 42 is found
        else:
            color = (41, 154, 255)  # Blue for unchecked or passed boxes
        
        pyglet.shapes.Rectangle(x, y, box_width, box_height, color=color, batch=batch).draw()
        # Draw the number inside the box
        label = pyglet.text.Label(str(number), x=x+box_width//2, y=y+box_height//2, anchor_x='center', anchor_y='center', batch=batch)
        label.draw()

pyglet.app.run()